import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES

staging_events_table_drop = ""
staging_songs_table_drop = ""
songplay_table_drop = ""
user_table_drop = ""
song_table_drop = ""
artist_table_drop = ""
time_table_drop = ""

# CREATE TABLES
## 1. unknown length character columns use the default Redshift length of 256
## 2. primary key constraints are not used since Redshift does not enforce these


staging_events_table_create= (
    "CREATE TABLE staging_log_data ("
        "title VARCHAR(256),"                       # log_data['song']
        "artist_name VARCHAR(256),"                 # log_data['artist']
        "start_time TIMESTAMP NOT NULL,"            # log_data['ts']
        "user_id BIGINT NOT NULL,"                  # log_data['userId']
        "session_id BIGINT NOT NULL,"               # log_data['sessionId']           
        "level VARCHAR(4) NOT NULL,"                # log_data['level']
        "location VARCHAR(256),"                    # log_data['location']
        "user_agent VARCHAR(256) NOT NULL"          # log_data['userAgent']
        "first_name VARCHAR(256) NOT NULL,"         # log_data['firstName']
        "last_name VARCHAR(256) NOT NULL,"          # log_data['lastName']
        "gender VARCHAR(1) NOT NULL,"               # log_data['gender']
    ")"
)

staging_songs_table_create = (
    "CREATE TABLE staging_song_data ("
        "song_id VARCHAR(18) NOT NULL,"             # song_data['song_id']
        "artist_id VARCHAR(18) NOT NULL,"           # song_data['artist_id']
        "title VARCHAR(256) NOT NULL,"              # song_data['title']
        "year SMALLINT,"                            # song_data['year']
        "duration DOUBLE PRECISION NOT NULL,"       # song_data['duration']
        "artist_name VARCHAR(256) NOT NULL,"        # song_data['artist_name']
        "artist_location VARCHAR(30),"              # song_data['artist_location']
        "artist_latitude DOUBLE PRECISION,"         # song_data['artist_latitude']
        "artist_longitude DOUBLE PRECISION"         # song_data['artist_longitude']
    ")"
)


songplay_table_create = (
    "CREATE TABLE songplay ("
        "songplay_id BIGINT IDENTITY(0,1)"          # SQL autogenerated unique values
        "song_id VARCHAR(18) NOT NULL,"             # song_data['song_id'] using log_data['song']=song_data['title']
        "artist_id VARCHAR(18) NOT NULL,"           # song_data['artist_id'] using log_data['artist']=song_data['artist_name']
        "start_time TIMESTAMP NOT NULL,"            # log_data['ts']
        "user_id BIGINT NOT NULL,"                  # log_data['userId']
        "session_id BIGINT NOT NULL,"               # log_data['sessionId']           
        "level VARCHAR(4) NOT NULL,"                # log_data['level']
        "location VARCHAR(256),"                    # log_data['location']
        "user_agent VARCHAR(256) NOT NULL"          # log_data['userAgent']
    ")"
)

user_table_create = (
    "CREATE TABLE user ("
        "user_id BIGINT NOT NULL,"                  # log_data['userId']
        "first_name VARCHAR(256) NOT NULL,"         # log_data['firstName']
        "last_name VARCHAR(256) NOT NULL,"          # log_data['lastName']
        "gender VARCHAR(1) NOT NULL,"               # log_data['gender']
        "level VARCHAR(4) NOT NULL"                 # log_data['level']
")"
)

song_table_create = (
    "CREATE TABLE song ("
        "song_id VARCHAR(18) NOT NULL,"             # song_data['song_id']
        "title VARCHAR(256) NOT NULL,"              # song_data['title']
        "artist_id VARCHAR(18) NOT NULL,"           # song_data['artist_id']
        "year SMALLINT,"                            # song_data['year']
        "duration DOUBLE PRECISION NOT NULL"        # song_data['duration']
    ")"
)

artist_table_create = (
    "CREATE TABLE artist ("
        "artist_id VARCHAR(18) NOT NULL,"           # song_data['artist_id']
        "artist_name VARCHAR(256) NOT NULL,"        # song_data['artist_name']
        "artist_location VARCHAR(30),"              # song_data['artist_location']
        "artist_latitude DOUBLE PRECISION,"         # song_data['artist_latitude']
        "artist_longitude DOUBLE PRECISION"         # song_data['artist_longitude']
    ")"
)

time_table_create = (
    "CREATE TABLE time ("
        "start_time TIMESTAMP NOT NULL,"            # log_data['ts']
        "hour SMALLINT NOT NULL",                   # log_data['ts']
        "day SMALLINT NOT NULL,"                    # log_data['ts']
        "week SMALLINT NOT NULL,"                   # log_data['ts']
        "month SMALLINT NOT NULL,"                  # log_data['ts']
        "year SMALLINT NOT NULL,"                   # log_data['ts']
        "weekday SMALLINT NOT NULL"                 # log_data['ts']
    ")"
)

# STAGING TABLES

staging_events_copy = ("""
""").format()

staging_songs_copy = ("""
""").format()

# FINAL TABLES

songplay_table_insert = ("""
""")

user_table_insert = ("""
""")

song_table_insert = ("""
""")

artist_table_insert = ("""
""")

time_table_insert = ("""
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
