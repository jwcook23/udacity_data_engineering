import configparser


# Load Configuration
config = configparser.ConfigParser()
config.read('dwh.cfg')

# Drop Tables
## 1. IF EXISTS clause is used to help support testing purposes.

staging_events_table_drop = "DROP TABLE IF EXISTS staging_log_data"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_song_data"
songplay_table_drop = "DROP TABLE IF EXISTS songplay"
user_table_drop = "DROP TABLE IF EXISTS user"
song_table_drop = "DROP TABLE IF EXISTS song"
artist_table_drop = "DROP TABLE IF EXISTS artist"
time_table_drop = "DROP TABLE IF EXISTS time"

# Create Tables
## 1. unknown length character columns use the default Redshift length of 256.
## 2. primary key constraints are not used since Redshift does not enforce these (although it uses them for query plans).

staging_events_table_create= (
    "CREATE TABLE staging_log_data ("
        "title VARCHAR(256),"                       # log_data['song']
        "artist_name VARCHAR(256),"                 # log_data['artist']
        "start_time TIMESTAMP NOT NULL,"            # log_data['ts']
        "user_id BIGINT NOT NULL,"                  # log_data['userId']
        "session_id BIGINT NOT NULL,"               # log_data['sessionId']           
        "level VARCHAR(4) NOT NULL,"                # log_data['level']
        "location VARCHAR(256),"                    # log_data['location']
        "user_agent VARCHAR(256) NOT NULL"          # log_data['userAgent']
        "first_name VARCHAR(256) NOT NULL,"         # log_data['firstName']
        "last_name VARCHAR(256) NOT NULL,"          # log_data['lastName']
        "gender VARCHAR(1) NOT NULL,"               # log_data['gender']
    ")"
)

staging_songs_table_create = (
    "CREATE TABLE staging_song_data ("
        "song_id VARCHAR(18) NOT NULL,"             # song_data['song_id']
        "artist_id VARCHAR(18) NOT NULL,"           # song_data['artist_id']
        "title VARCHAR(256) NOT NULL,"              # song_data['title']
        "year SMALLINT,"                            # song_data['year']
        "duration DOUBLE PRECISION NOT NULL,"       # song_data['duration']
        "artist_name VARCHAR(256) NOT NULL,"        # song_data['artist_name']
        "artist_location VARCHAR(30),"              # song_data['artist_location']
        "artist_latitude DOUBLE PRECISION,"         # song_data['artist_latitude']
        "artist_longitude DOUBLE PRECISION"         # song_data['artist_longitude']
    ")"
)

songplay_table_create = (
    "CREATE TABLE songplay ("
        "songplay_id BIGINT IDENTITY(0,1)"          # SQL autogenerated unique values
        "song_id VARCHAR(18) NOT NULL,"             # song_data['song_id'] using log_data['song']=song_data['title']
        "artist_id VARCHAR(18) NOT NULL,"           # song_data['artist_id'] using log_data['artist']=song_data['artist_name']
        "start_time TIMESTAMP NOT NULL,"            # log_data['ts']
        "user_id BIGINT NOT NULL,"                  # log_data['userId']
        "session_id BIGINT NOT NULL,"               # log_data['sessionId']           
        "level VARCHAR(4) NOT NULL,"                # log_data['level']
        "location VARCHAR(256),"                    # log_data['location']
        "user_agent VARCHAR(256) NOT NULL"          # log_data['userAgent']
    ")"
)

user_table_create = (
    "CREATE TABLE user ("
        "user_id BIGINT NOT NULL,"                  # log_data['userId']
        "first_name VARCHAR(256) NOT NULL,"         # log_data['firstName']
        "last_name VARCHAR(256) NOT NULL,"          # log_data['lastName']
        "gender VARCHAR(1) NOT NULL,"               # log_data['gender']
        "level VARCHAR(4) NOT NULL"                 # log_data['level']
    ")"
)

song_table_create = (
    "CREATE TABLE song ("
        "song_id VARCHAR(18) NOT NULL,"             # song_data['song_id']
        "title VARCHAR(256) NOT NULL,"              # song_data['title']
        "artist_id VARCHAR(18) NOT NULL,"           # song_data['artist_id']
        "year SMALLINT,"                            # song_data['year']
        "duration DOUBLE PRECISION NOT NULL"        # song_data['duration']
    ")"
)

artist_table_create = (
    "CREATE TABLE artist ("
        "artist_id VARCHAR(18) NOT NULL,"           # song_data['artist_id']
        "artist_name VARCHAR(256) NOT NULL,"        # song_data['artist_name']
        "artist_location VARCHAR(30),"              # song_data['artist_location']
        "artist_latitude DOUBLE PRECISION,"         # song_data['artist_latitude']
        "artist_longitude DOUBLE PRECISION"         # song_data['artist_longitude']
    ")"
)

time_table_create = (
    "CREATE TABLE time ("
        "start_time TIMESTAMP NOT NULL,"            # log_data['ts']
        "hour SMALLINT NOT NULL",                   # log_data['ts']
        "day SMALLINT NOT NULL,"                    # log_data['ts']
        "week SMALLINT NOT NULL,"                   # log_data['ts']
        "month SMALLINT NOT NULL,"                  # log_data['ts']
        "year SMALLINT NOT NULL,"                   # log_data['ts']
        "weekday SMALLINT NOT NULL"                 # log_data['ts']
    ")"
)

# Copy from AWS S3 into Redshift Staging Tables

staging_events_copy = (f"""
    COPY staging_log_data
    FROM
""")
# staging_events_copy = ("""
# # COPY staging_events FROM {}
# #     CREDENTIALS 'aws_iam_role={}'
# #     COMPUPDATE OFF region 'us-west-2'
# #     TIMEFORMAT as 'epochmillisecs'
# #     FORMAT AS JSON {};
# # """).format(
#     config.get('S3', 'LOG_DATA'), 
#     config.get('IAM_ROLE', 'ARN'), 
#     config.get('S3', 'LOG_JSONPATH')
#             )

staging_songs_copy = (f"""
    COPY staging_song_data
    FROM {config['S3']['SONG_DATA']}
    IAM_ROLE {config['IAM_ROLE']['ARN']}
""")

# Insert from Redshift Staging Tables into Final Redshift Tables

songplay_table_insert = ("""
""")

user_table_insert = ("""
""")

song_table_insert = ("""
""")

artist_table_insert = ("""
""")

time_table_insert = ("""
""")

# Package Query Lists

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
